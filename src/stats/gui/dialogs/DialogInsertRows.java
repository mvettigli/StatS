/* ----------------------------------------------------------------------------
 * File: DialogInsertRows.java
 * Date: May 26th, 2013
 * ----------------------------------------------------------------------------
 */
package stats.gui.dialogs;

import java.awt.Frame;

/**
 * The {@code DialogInsertRows} class is a dialog for getting all the
 * informations needed for insertion of rows in a {@code Table} object
 * upon selection. The information are:
 * <ul>
 * <li>number of columns to be inserted</li>
 * <li>position of the insertion.
 * </ul>
 * After initialization, call {@code showDialog()} to show the dialog and
 * get dialog result.
 *
 * @author M. Vettigli
 * @version 1.0
 */
public class DialogInsertRows extends javax.swing.JDialog {

  /**
   * Define the insertion position after current selection.
   */
  public static final int POSITION_AFTER = 0;

  /**
   * Define the insertion position before current selection.
   */
  public static final int POSITION_BEFORE = 1;

  /**
   * Define the insertion position at the beginning of the table.
   */
  public static final int POSITION_BEGIN = 2;

  /**
   * Define the insertion position at the end of the table.
   */
  public static final int POSITION_END = 3;

  /**
   * Stores the result of the dialog. If true, the dialog was successfully
   * closed and insertion can take place. If false, the dialog was closed or
   * the operation was not confirmed.
   */
  private boolean dialogResult;

  /**
   * Creates new form DialogInsertRows
   */
  public DialogInsertRows(Frame parent, boolean modal) {

    /* initialize form components */
    super(parent, modal);
    initComponents();
    this.getRootPane().setDefaultButton(buttonOk);

    /* initialize private variable */
    dialogResult = false;

  }

  /**
   * Returns the number of new rows to be inserted. The value is extracted
   * from the spinner-box of the dialog.
   *
   * @return number of new rows.
   */
  public int getRowNumber() {
    int number = 0;
    try
    {
      number = Integer.parseInt(spinnerNumber.getValue().toString());
    } catch (NumberFormatException e)
    {
      return 0;
    }
    return number;
  }

  /**
   * Returns the position of the new rows to be inserted. It depends on
   * selection of radio-boxes in the dialog window by the user. The possible
   * results are:
   * <ul> <li>{@code POSITION_AFTER},</li>
   * <li>{@code POSITION_BEFORE},</li>
   * <li>{@code POSITION_BEGIN},</li>
   * <li>{@code POSITION_END}</li></ul>
   *
   * @return position of the insertion.
   */
  public int getRowPosition() {
    // check which radio button is selected and returns the proper value
    if (radioAfter.isSelected()) return POSITION_AFTER;
    else if (radioBefore.isSelected()) return POSITION_BEFORE;
    else if (radioBegin.isSelected()) return POSITION_BEGIN;
    else return POSITION_END;
  }

  /**
   * The function shows the {@code DialogInsertRows} object in modal state and
   * returns true if the insertion is confirmed, else false.
   *
   * @return true if insertion is confirmed, else false.
   */
  public boolean showDialog() {
    setVisible(true);
    return dialogResult;
  }

  /**
   * This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    buttonGroup = new javax.swing.ButtonGroup();
    spinnerNumber = new javax.swing.JSpinner();
    radioAfter = new javax.swing.JRadioButton();
    radioBefore = new javax.swing.JRadioButton();
    radioBegin = new javax.swing.JRadioButton();
    radioEnd = new javax.swing.JRadioButton();
    labelNumber = new javax.swing.JLabel();
    javax.swing.JLabel labelPosition = new javax.swing.JLabel();
    separator = new javax.swing.JSeparator();
    buttonCancel = new javax.swing.JButton();
    buttonOk = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Insert rows...");

    spinnerNumber.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));

    buttonGroup.add(radioAfter);
    radioAfter.setSelected(true);
    radioAfter.setText("after");

    buttonGroup.add(radioBefore);
    radioBefore.setText("before");

    buttonGroup.add(radioBegin);
    radioBegin.setText("begin");

    buttonGroup.add(radioEnd);
    radioEnd.setText("end");

    labelNumber.setText("Number:");

    labelPosition.setText("Position :");

    buttonCancel.setText("Cancel");
    buttonCancel.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonCancelActionPerformed(evt);
      }
    });

    buttonOk.setText("OK");
    buttonOk.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        buttonOkActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addComponent(labelNumber)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(spinnerNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 51, Short.MAX_VALUE)
            .addGap(18, 18, 18)
            .addComponent(labelPosition)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(radioAfter)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(radioBefore)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(radioBegin)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(radioEnd))
          .addComponent(separator)
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addGap(0, 0, Short.MAX_VALUE)
            .addComponent(buttonOk)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(buttonCancel)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(labelNumber)
          .addComponent(spinnerNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(radioBefore)
          .addComponent(radioAfter)
          .addComponent(radioBegin)
          .addComponent(radioEnd)
          .addComponent(labelPosition))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 6, Short.MAX_VALUE)
        .addComponent(separator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(buttonOk)
          .addComponent(buttonCancel))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  /**
   * Handles the click on "OK" button. The function will set the dialog result
   * flag on true and it will dispose the dialog.
   *
   * @param evt the action event.
   */
  private void buttonOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOkActionPerformed
    dialogResult = true;
    this.dispose();
  }//GEN-LAST:event_buttonOkActionPerformed

  /**
   * Handles the click on "Cancel" button. The function will set the dialog
   * result flag on false and it will dispose the dialog.
   *
   * @param evt the action event.
   */
  private void buttonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonCancelActionPerformed
    dialogResult = false;
    this.dispose();
  }//GEN-LAST:event_buttonCancelActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton buttonCancel;
  private javax.swing.ButtonGroup buttonGroup;
  private javax.swing.JButton buttonOk;
  private javax.swing.JLabel labelNumber;
  private javax.swing.JRadioButton radioAfter;
  private javax.swing.JRadioButton radioBefore;
  private javax.swing.JRadioButton radioBegin;
  private javax.swing.JRadioButton radioEnd;
  private javax.swing.JSeparator separator;
  private javax.swing.JSpinner spinnerNumber;
  // End of variables declaration//GEN-END:variables

}
