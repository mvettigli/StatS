/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package stats.gui;

import com.sun.java.swing.plaf.motif.MotifBorders;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.JViewport;
import javax.swing.border.Border;
import javax.swing.border.EtchedBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.MatteBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.border.StrokeBorder;
import javax.swing.plaf.metal.MetalBorders;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;
import stats.core.DataType;
import stats.core.Table;

/**
 *
 * @author marco
 */
public class TablePanel extends javax.swing.JPanel {

private static Color header_forecolor = new Color(0, 0, 0);

private static Color header_unselected_color = new Color(230, 230, 230);

private static Color header_selected_color = new Color(200, 200, 200);

/**
 * Creates new form TablePanel
 */
public TablePanel() {
    initComponents();


    // initialize table object
    table = new Table();
    // initialize main_table
    table_model = new MainTableModel(table);
    column_model = new MainTableColumnModel(table);

    initMainTable();
    initRowTable();

    table_main_button.setText(table.name());
    table_main_button.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        System.out.println(table);
    }
    });

    // setting of popup menus
    initPopUpMenuColumns();
    initPopupMenuRows();
    main_table.getTableHeader().setComponentPopupMenu(popup_columns);
    row_table.setComponentPopupMenu(popup_rows);

    initColumnList();
}

/**
 * This method is called from within the constructor to initialize the form.
 * WARNING: Do NOT modify this code. The content of this method is always
 * regenerated by the Form Editor.
 */
@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        jl_rows = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jl_columns = new javax.swing.JList();
        table_main_button = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();

        setAutoscrolls(true);
        setPreferredSize(new java.awt.Dimension(600, 600));

        jSplitPane1.setDividerLocation(150);
        jSplitPane1.setDividerSize(2);

        jSplitPane2.setDividerLocation(350);
        jSplitPane2.setDividerSize(2);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(0.5);

        jl_rows.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rows", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane3.setViewportView(jl_rows);

        jSplitPane2.setRightComponent(jScrollPane3);

        jl_columns.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Columns", javax.swing.border.TitledBorder.RIGHT, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane4.setViewportView(jl_columns);

        table_main_button.setText("TableName");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(table_main_button, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(table_main_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
        );

        jSplitPane2.setLeftComponent(jPanel1);

        jSplitPane1.setLeftComponent(jSplitPane2);
        jSplitPane1.setRightComponent(scrollPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 500, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 420, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JList jl_columns;
    private javax.swing.JList jl_rows;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JButton table_main_button;
    // End of variables declaration//GEN-END:variables

private JTable row_table;

private JTable main_table;

private Table table;

private MainTableModel table_model;

private MainTableColumnModel column_model;

private JPopupMenu popup_columns;

private JPopupMenu popup_rows;

private void initPopUpMenuColumns() {
    popup_columns = new JPopupMenu();
    JMenuItem popup_cols_properties = new JMenuItem("Properties");
    JMenuItem popup_cols_insert = new JMenuItem("Insert");
    JMenuItem popup_cols_delete = new JMenuItem("Delete");

    popup_cols_insert.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        int[] selected_cols = column_model.getSelectedColumns();
        for (int i = 0; i < selected_cols.length; i++)
            column_model.insertColumns(
                    selected_cols[i] + i,
                    DataType.CHARACTER, 1);
    }
    });
    popup_cols_delete.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
    }
    });

    popup_columns.add(popup_cols_properties);
    popup_columns.addSeparator();
    popup_columns.add(popup_cols_insert);
    popup_columns.add(popup_cols_delete);
}

private void initPopupMenuRows() {
    popup_rows = new JPopupMenu("Rows");
    JMenuItem popup_rows_marker = new JMenuItem("Marker");
    JMenuItem popup_rows_size = new JMenuItem("Size");
    JMenuItem popup_rows_insert = new JMenuItem("Insert");
    JMenuItem popup_rows_delete = new JMenuItem("Delete");

    popup_rows_insert.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        table.addRow();
        main_table.updateUI();
        row_table.updateUI();

    }
    });
    popup_rows.add(popup_rows_marker);
    popup_rows.add(popup_rows_size);
    popup_rows.addSeparator();
    popup_rows.add(popup_rows_insert);
    popup_rows.add(popup_rows_delete);


}

private void initColumnList() {
    DefaultListModel list_model = new DefaultListModel();

    for (int i = 0; i < table.columns(); i++)
        list_model.addElement(table.getColumnType(i)
                + "_" + table.getColumnName(i));

    jl_columns.setModel(list_model);
    jl_columns.setCellRenderer(new ColumnListRenderer());
}

private void initMainTable() {

    main_table = new JTable(table_model, column_model);
    main_table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
    main_table.setAutoCreateColumnsFromModel(true);
    main_table.getTableHeader().setPreferredSize(new Dimension(100, 30));
    // set the render of the table header
    main_table.getTableHeader().setDefaultRenderer(new TableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(
            JTable table, Object value, boolean isSelected,
            boolean hasFocus, int row, int column) {
        // Create new JLabel to show the content of the header
        JLabel label = new JLabel();
        label.setOpaque(true);
        label.setText(value.toString());    // actually class is String
        label.setHorizontalAlignment(JLabel.CENTER);
        label.setForeground(header_forecolor);
        label.setBorder(new MetalBorders.TableHeaderBorder());
        /* because the method returns always false, the column selection 
         * must be checked through JTable object. */
        isSelected = main_table.isColumnSelected(column);
        if (isSelected) label.setBackground(header_selected_color);
        else label.setBackground(header_unselected_color);
        // return the JLabel
        return label;
    }
    });
    // set the table in the scrollpane
    scrollPane.setViewportView(main_table);

}

private void initRowTable() {
    // initialize row table and define the model
    row_table = new JTable(new AbstractTableModel() {
    @Override
    public int getRowCount() {
        return table.rows();
    }

    @Override
    public int getColumnCount() {
        return 1;   // single-column table
    }

    @Override
    public Object getValueAt(int rowIndex, int columnIndex) {
        return rowIndex + 1;    // returns row index
    }
    });
    row_table.setSelectionModel(main_table.getSelectionModel());
    row_table.setDefaultRenderer(Object.class, new TableCellRenderer() {
    @Override
    public Component getTableCellRendererComponent(
            JTable table, Object value, boolean isSelected,
            boolean hasFocus, int row, int column) {
        JLabel label = new JLabel();
        label.setOpaque(true);
        label.setText(value.toString());
        label.setForeground(header_forecolor);
        if (isSelected) label.setBackground(header_selected_color);
        else label.setBackground(header_unselected_color);
        label.setHorizontalAlignment(JLabel.RIGHT);
        return label;
    }
    });

    // initialize the viewport for 
    Dimension fixedSize = new Dimension(60, 0);    
    JViewport row_view = new JViewport();
    row_view.setView(row_table);
    row_view.setPreferredSize(fixedSize);
    row_view.setMaximumSize(fixedSize);

    scrollPane.setRowHeaderView(row_view);
    


}

}
